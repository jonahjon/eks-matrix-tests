---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: deck
  labels:
    app: deck
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: deck
  template:
    metadata:
      labels:
        app: deck
    spec:
      serviceAccountName: "s3-deck"
      terminationGracePeriodSeconds: 30
      containers:
        - name: deck
          image: gcr.io/k8s-prow/deck:v20200916-29e367bb39
          env:
          - name: AWS_REGION
            value: us-west-2
          args:
            - --allow-insecure
            - --rerun-creates-job
            - --spyglass=true
            - --tide-url=http://tide/
            - --hook-url=http://hook:8888/plugin-help
            - --config-path=/etc/config/config.yaml
            - --job-config-path=/etc/job-config
            - --kubeconfig=/etc/kubeconfig/config
            - --plugin-config=/etc/plugins/plugins.yaml
            - --github-oauth-config-file=/etc/githuboauth/secret
            - --github-endpoint=http://ghproxy
            - --github-endpoint=https://api.github.com
            - --github-token-path=/etc/github/oauth
            - --cookie-secret=/etc/cookie/secret
            - --oauth-url=/github-login
          ports:
            - name: http
              containerPort: 8080
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: job-config
              mountPath: /etc/job-config
              readOnly: true
            - name: oauth
              mountPath: /etc/github
              readOnly: true
            - name: oauth-config
              mountPath: /etc/githuboauth
              readOnly: true
            - name: plugins
              mountPath: /etc/plugins
              readOnly: true
            - name: branding
              mountPath: /static/extensions
              readOnly: true
            - name: kubeconfig
              mountPath: /etc/kubeconfig
              readOnly: true
            - name: cookie-secret
              mountPath: /etc/cookie
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 3
            timeoutSeconds: 600
      volumes:
        - name: kubeconfig
          secret:
            defaultMode: 420
            secretName: kubeconfig
        - name: oauth-config
          secret:
              secretName: github-oauth-config
        - name: cookie-secret
          secret:
              secretName: cookie
        - name: config
          configMap:
            name: config
        - name: job-config
          configMap:
            name: job-config
        - name: oauth
          secret:
              secretName: oauth-token
        - name: plugins
          configMap:
            name: plugins
        - name: branding
          configMap:
            defaultMode: 420
            name: branding
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: deck
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
      - watch
      # Required when deck runs with `--rerun-creates-job=true`
      - create
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: test-pods
  name: deck
rules:
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: deck
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: deck
subjects:
- kind: ServiceAccount
  name: s3-deck
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: test-pods
  name: deck
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: deck
subjects:
- kind: ServiceAccount
  name: s3-deck
  namespace: default